import Foundation
import Combine

@globalActor actor StockServiceActor {
    static let shared = StockServiceActor()
}

@MainActor
class StockService: ObservableObject {
    static let shared = StockService()

    @Published var usdExchangeRate: Double = 31.0  // 預設匯率
    private var cancellables = Set<AnyCancellable>()
    private let yahooFinanceBaseURL = "https://query1.finance.yahoo.com/v8/finance/chart"
    private let maxRetries = 3
    private let retryDelay: TimeInterval = 2.0

    private func createRequest(url: URL) -> URLRequest {
        var request = URLRequest(url: url)
        request.setValue("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36", forHTTPHeaderField: "User-Agent")
        request.timeoutInterval = 10
        return request
    }

    // 獲取台股收盤價（台灣證交所 OpenAPI，自動去除 .TW/.TWO）
    func fetchTWStockPrice(symbol: String) async throws -> Double {
        let url = URL(string: "https://openapi.twse.com.tw/v1/exchangeReport/STOCK_DAY_AVG_ALL")!
        let (data, _) = try await URLSession.shared.data(from: url)
        guard let jsonArray = try? JSONSerialization.jsonObject(with: data) as? [[String: Any]] else {
            throw NSError(domain: "StockService", code: -1, userInfo: [NSLocalizedDescriptionKey: "台灣證交所 API 回傳格式錯誤"])
        }
        // 自動去除 .TW、.TWO
        let code = symbol.replacingOccurrences(of: ".TW", with: "").replacingOccurrences(of: ".TWO", with: "")
        if let stock = jsonArray.first(where: { $0["Code"] as? String == code }),
           let priceString = stock["ClosingPrice"] as? String,
           let price = Double(priceString) {
            return price
        } else {
            throw NSError(domain: "StockService", code: -1, userInfo: [NSLocalizedDescriptionKey: "查無此股票或暫無報價"])
        }
    }

    // 獲取美股即時價格（改用 Finnhub API）
    func fetchUSStockPrice(symbol: String) async throws -> Double {
//        let apiKey = "d13t24hr01qs7gljnvhgd13t24hr01qs7gljnvi0"
        let apiKey = "d13tic9r01qs7gljqfd0d13tic9r01qs7gljqfdg"
        let urlString = "https://finnhub.io/api/v1/quote?symbol=\(symbol)&token=\(apiKey)"
        print("Fetching US stock price from: \(urlString)")

        guard let url = URL(string: urlString) else {
            throw URLError(.badURL)
        }

        let (data, response) = try await URLSession.shared.data(from: url)
        guard let httpResponse = response as? HTTPURLResponse, httpResponse.statusCode == 200 else {
            throw URLError(.badServerResponse)
        }

        let jsonString = String(data: data, encoding: .utf8) ?? ""
        print("Finnhub 回傳: \(jsonString)")

        guard let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any] else {
            throw NSError(domain: "StockService", code: -1, userInfo: [NSLocalizedDescriptionKey: "API 回傳格式錯誤"])
        }

        if let error = json["error"] as? String {
            throw NSError(domain: "StockService", code: -2, userInfo: [NSLocalizedDescriptionKey: error])
        }

        guard let price = json["c"] as? Double, price > 0 else {
            throw NSError(domain: "StockService", code: -1, userInfo: [NSLocalizedDescriptionKey: "查無此股票或暫無報價"])
        }
        return price
    }

    // 獲取美元匯率
    private func fetchUSDExchangeRate() {
        let urlString = "\(yahooFinanceBaseURL)/TWD=X?interval=1d&range=1d"
        guard let url = URL(string: urlString) else { return }

        let request = createRequest(url: url)

        Task { @MainActor in
            do {
                let (data, _) = try await URLSession.shared.data(for: request)

                let decoder = JSONDecoder()
                let result = try decoder.decode(YahooFinanceResponse.self, from: data)

                if let rate = result.chart.result.first?.meta.regularMarketPrice {
                    self.usdExchangeRate = rate  // 直接使用 TWD/USD 匯率
                }
            } catch {
                print("Error fetching exchange rate: \(error)")
            }
        }
    }

    init() {
        // 每5分鐘更新一次匯率
        Timer.publish(every: 300, on: .main, in: .common)
            .autoconnect()
            .sink { [weak self] _ in
                self?.fetchUSDExchangeRate()
            }
            .store(in: &cancellables)

        fetchUSDExchangeRate()
    }
}

// 股票資訊模型
@MainActor
struct StockInfo {
    let symbol: String
    let shares: Int
    let currentPrice: Double
    let currency: Currency

    enum Currency: String {
        case TWD = "TWD"
        case USD = "USD"
    }

    var marketValue: Double {
        Double(shares) * currentPrice
    }

    var marketValueInTWD: Double {
        switch currency {
        case .TWD:
            return marketValue
        case .USD:
            let service = StockService.shared
            return marketValue * service.usdExchangeRate
        }
    }
}

// Yahoo Finance API 回應結構
struct YahooFinanceResponse: Codable {
    let chart: Chart

    struct Chart: Codable {
        let result: [Result]

        struct Result: Codable {
            let meta: Meta

            struct Meta: Codable {
                let regularMarketPrice: Double
            }
        }
    }
}
